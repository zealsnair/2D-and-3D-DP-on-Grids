#include <bits/stdc++.h>
using namespace std;

int rec(int i, int j, vector<vector<int>>& matrix, vector<vector<int>>& dp){
    if(j < 0 || j >= matrix[0].size()){
        return -1e8;
    }
    if(i == 0){
        return matrix[0][j];
    }

    if(dp[i][j] != -1){
        return dp[i][j];
    }

    int u = matrix[i][j] + rec(i-1, j, matrix, dp);
    int ld = matrix[i][j] + rec(i-1, j-1, matrix, dp);
    int rd = matrix[i][j] + rec(i-1, j+1, matrix, dp);

    return dp[i][j] = max(u, max(ld, rd));
}

int getMaxPathSum(vector<vector<int>> &matrix) {
    int n = matrix.size();
    int m = matrix[0].size();

    vector<int> prev(m);
    
    for(int j = 0; j < m; j++){
        prev[j] = matrix[0][j];
    }

    for(int i = 1; i < n; i++){
        vector<int> curr(m);
        for(int j = 0; j < m; j++){
            int u = matrix[i][j] + prev[j];

            int ld = matrix[i][j];
            if(j > 0){
                ld += prev[j-1];
            }
            else{
                ld += -1e8;
            }

            int rd = matrix[i][j];
            if(j+1 < m){
                rd += prev[j+1];
            }
            else{
                rd += -1e8;
            }

            curr[j] = max(u, max(ld, rd));
        }
        prev = curr;
    }

    int maxi = -1e8;
    for(int j = 0; j < m; j++){
        maxi = max(maxi, prev[j]);
    }
    return maxi;
}

int main() {
    int n, m;
    cout << "Enter number of rows (n): ";
    cin >> n;
    cout << "Enter number of columns (m): ";
    cin >> m;

    vector<vector<int>> matrix(n, vector<int>(m));

    cout << "Enter the matrix elements row-wise:" << endl;
    for(int i = 0; i < n; i++){
        for(int j = 0; j < m; j++){
            cin >> matrix[i][j];
        }
    }

    int maxPathSum = getMaxPathSum(matrix);
    cout << "Maximum Path Sum: " << maxPathSum << endl;

    return 0;
}
